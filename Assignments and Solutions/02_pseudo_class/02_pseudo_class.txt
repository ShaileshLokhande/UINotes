

### What is a Pseudo-Class in CSS?

A **pseudo-class** in CSS is used to define the special state of an element. For example, you can style elements when a user hovers over them, when they have been visited, or when they are the first child of their parent element.

Pseudo-classes are indicated with a colon (`:`) followed by their name. They allow you to apply styles dynamically without needing to add or remove classes via JavaScript.

### Common Pseudo-Classes in CSS

| Pseudo-Class          | Description                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `:hover`              | Applies styles when the user hovers over an element.                       |
| `:focus`              | Applies styles when an element gains focus (e.g., via keyboard or click).  |
| `:active`             | Applies styles when an element is being activated (clicked).               |
| `:visited`            | Targets links that have already been visited.                              |
| `:first-child`        | Targets the first child of a parent element.                               |
| `:last-child`         | Targets the last child of a parent element.                                |
| `:nth-child(n)`       | Targets elements based on their order in their parent (e.g., every 2nd child). |
| `:not(selector)`      | Excludes elements matching the specified selector.                         |
| `:checked`            | Targets checkboxes or radio buttons that are checked.                     |

---

### Assignments to Study Pseudo-Classes

1. **Basic Pseudo-Classes**
   - Create a list of links (`<a>` tags).
   - Use `:hover` to change the background color when you hover over the links.
   - Use `:visited` to change the text color of links that have been visited.

2. **Form Elements**
   - Create a form with input fields, checkboxes, and a submit button.
   - Style the `:focus` state for the input fields (e.g., add a border color).
   - Style `:checked` to highlight checked checkboxes.

3. **Dynamic Styles**
   - Create a button and use `:active` to change its appearance when clicked.

4. **Child Selectors**
   - Create a list of items (`<ul>` or `<ol>`).
   - Use `:first-child` to style the first item differently.
   - Use `:nth-child(even)` to style every even item with a specific background color.

5. **Combining Pseudo-Classes**
   - Create a table and:
     - Use `:nth-child` to stripe the rows (alternate row colors).
     - Style the `:hover` state of each row.

6. **Custom Assignment**
   - Create a navigation bar with links.
   - Style the active link using the `:active` pseudo-class.
   - Use `:not` to apply styles to all links except a specific one.

---

### Example Code for Practice

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pseudo-Class Example</title>
  <style>
    /* Hover */
    a:hover {
      color: red;
      text-decoration: underline;
    }

    /* Focus */
    input:focus {
      border: 2px solid blue;
    }

    /* Checked */
    input[type="checkbox"]:checked {
      background-color: yellow;
    }

    /* First child */
    li:first-child {
      font-weight: bold;
    }

    /* Nth child */
    li:nth-child(odd) {
      background-color: lightgray;
    }
  </style>
</head>
<body>
  <h1>Pseudo-Class Assignment</h1>
  <a href="#">Hover over me</a>
  <br><br>

  <input type="text" placeholder="Focus on me">
  <br><br>

  <input type="checkbox"> Check me!
  <br><br>

  <ul>
    <li>First Item</li>
    <li>Second Item</li>
    <li>Third Item</li>
  </ul>
</body>
</html>
```

Try experimenting with the example code and assignments to gain a deeper understanding of pseudo-classes!